"""
Напишите программу, которая считывает с консоли числа (по одному в строке) до тех пор, пока сумма введённых чисел не
будет равна 0 и сразу после этого выводит сумму квадратов всех считанных чисел.Гарантируется, что в какой-то момент
сумма введённых чисел окажется равной 0, после этого считывание продолжать не нужно.
В примере мы считываем числа 1, -3, 5, -6, -10, 13; в этот момент замечаем, что сумма этих чисел равна нулю и выводим
сумму их квадратов, не обращая внимания на то, что остались ещё не прочитанные значения.﻿
Sample Input:
1
-3
5
-6
-10
13
4
-8
Sample Output:
340
"""
# summary, sq_summary = 0, 0
#
# while True:#
#    s = int(input())
#    summary += s
#    sq_summary += s * s
#    if summary == 0:
#        break
# print(sq_summary)
# ***************************************************************************************************************
import os

"""
Напишите программу, которая выводит часть последовательности 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 ... 
(число повторяется столько раз, чему равно). На вход программе передаётся неотрицательное целое число n — столько 
элементов последовательности должна отобразить программа. На выходе ожидается последовательность чисел, записанных 
через пробел в одну строку.
Например, если n = 7, то программа должна вывести 1 2 2 3 3 3 4.
Sample Input:
7
Sample Output:
1 2 2 3 3 3 4
"""
# n = int(input())
# count = 0
# for i in range(1, n + 1):
#    for j in range(i):
#        if count < n:
#            count += 1
#            print(str(i), end=' ')
#        else:
#            break
# ***************************************************************************************************************
"""Напишите программу, которая считывает список чисел lst из первой строки и число x из второй строки, 
которая выводит все позиции, на которых встречается число x в переданном списке lst. Позиции нумеруются с нуля, 
если число x не встречается в списке, вывести строку "Отсутствует" (без кавычек, с большой буквы). Позиции должны 
быть выведены в одну строку, по возрастанию абсолютного значения. Sample Input 1: 5 8 2 7 8 8 2 4 8 Sample Output 1: 
1 4 5 Sample Input 2: 5 8 2 7 8 8 2 4 10 Sample Output 2: Отсутствует """
# lst = input().split(' ')
# x = input()
# if x in lst:
#   for i in range(len(lst)):
#       if lst[i] == x:
#           print(i, end=' ')
# else:
#   print('Отсутствует')
# ***************************************************************************************************************
"""
Напишите программу, на вход которой подаётся прямоугольная матрица в виде последовательности строк, заканчивающихся
строкой, содержащей только строку "end" (без кавычек)
Программа должна вывести матрицу того же размера, у которой каждый элемент в позиции i, j равен сумме элементов первой
матрицы на позициях (i-1, j), (i+1, j), (i, j-1), (i, j+1). У крайних символов соседний элемент находится с
противоположной стороны матрицы.
В случае одной строки/столбца элемент сам себе является соседом по соответствующему направлению.
Sample Input 1:
9 5 3
0 7 -1
-5 2 9
end
Sample Output 1:
3 21 22
10 6 19
20 16 -1
Sample Input 2:
1
end
Sample Output 2:
4
"""
# lst, res, count = [], [], 0
# while True:
#    s = input()
#    if s == "end":
#        x = len(lst)
#        y = len(lst[0])
#        for i in range(x):
#            for j in range(y):
#                a = int(lst[i - 1][j])
#                if (i + 1) == x:
#                    b = int(lst[0][j])
#                else:
#                    b = int(lst[i + 1][j])
#                c = int(lst[i][j - 1])
#                if (j + 1) == y:
#                    d = int(lst[i][0])
#                else:
#                    d = int(lst[i][j + 1])
#                z = (a + b + c + d)
#                res.append(z)
#        # блок вывода результатов в нужном формате
#        if len(lst) == len(lst[0]):
#            for n in range(len(res)):
#                if count == len(lst) - 1:
#                    count = 0
#                    print(res[n], end="\n")
#                else:
#                    count += 1
#                    print(res[n], end=' ')
#        else:
#            for n in range(len(res)):
#                if count == len(lst[0]) - 1:
#                    count = 0
#                    print(res[n], end="\n")
#                else:
#                    count += 1
#                    print(res[n], end=' ')
#        break
#    else:
#        t = s.split(' ')
#        lst.append(t)
# ***************************************************************************************************************
"""
Выведите таблицу размером n×n, заполненную числами от 1 до n2 по спирали, выходящей из левого верхнего угла и 
закрученной по часовой стрелке, как показано в примере (здесь n=5):
Sample Input:
5
Sample Output:
1 2 3 4 5
16 17 18 19 6
15 24 25 20 7
14 23 22 21 8
13 12 11 10 9
"""
# n - размерность матрицы n x n
# mat - результирующая матрица
# st - текущее значение-счетчик для записи в матрицу
# m - коеффициент, используемый для заполнения верхней
# матрицы последующих витков, т.к. одномерные матрицы
# следующих витков имеют меньше значений
# n = int(input("Введите размер таблицы:" + '\n'))
# mat = [[0] * n for i in range(n)]
# st, m = 1, 0
# Заранее присваиваю значение центральному элементу матрицы
# mat[n // 2][n // 2] = n * n
# for v in range(n // 2):
#    # Заполнение верхней горизонтальной матрицы
#    for i in range(n - m):
#        mat[v][i + v] = st
#        st += 1
#    # Заполнение правой вертикальной матрицы
#    for i in range(v + 1, n - v):
#        mat[i][-v - 1] = st
#        st += 1
#    # Заполнение нижней горизонтальной матрицы
#    for i in range(v + 1, n - v):
#        mat[-v - 1][-i - 1] = st
#        st += 1
#    # Заполнение левой вертикальной матрицы
#    for i in range(v + 1, n - (v + 1)):
#        mat[-i - 1][v] = st
#        st += 1
#    m += 2
# Вывод результата на экран
# for i in mat:
#    print(*i)
# ***************************************************************************************************************
"""
Напишите функцию update_dictionary(d, key, value), которая принимает на вход словарь d и два числа: key и value.
Если ключ key есть в словаре d, то добавьте значение value в список, который хранится по этому ключу.
Если ключа key нет в словаре, то нужно добавить значение в список по ключу 2*key. Если и ключа 2*key нет, то нужно 
добавить ключ 2*key в словарь и сопоставить ему список из переданного элемента [value].
Требуется реализовать только эту функцию, кода вне неё не должно быть.
Функция не должна вызывать внутри себя функции input и print.
Пример работы функции:
d = {}
print(update_dictionary(d, 1, -1))  # None
print(d)                            # {2: [-1]}
update_dictionary(d, 2, -2)
print(d)                            # {2: [-1, -2]}
update_dictionary(d, 1, -3)
print(d)                            # {2: [-1, -2, -3]}
"""
# def update_dictionary(d, key, value):
#    if key in d.keys():
#        d[key] += [value]
#    else:
#        if key * 2 in d.keys():
#            d[key * 2] += [value]
#        else:
#            d[key * 2] = [value]
#
#
# d = {}
# print(update_dictionary(d, 1, -1))  # None
# print(d)  # {2: [-1]}
# update_dictionary(d, 2, -2)
# print(d)  # {2: [-1, -2]}
# update_dictionary(d, 1, -3)
# print(d)  # {2: [-1, -2, -3]}

# ***************************************************************************************************************
"""
Когда Антон прочитал «Войну и мир», ему стало интересно, сколько слов и в каком количестве используется в этой книге.
Помогите Антону написать упрощённую версию такой программы, которая сможет подсчитать слова, разделённые пробелом и 
вывести получившуюся статистику. Программа должна считывать одну строку со стандартного ввода и выводить для каждого 
уникального слова в этой строке число его повторений (без учёта регистра) в формате "слово количество" 
(см. пример вывода). Порядок вывода слов может быть произвольным, каждое уникальное слово﻿ должно выводиться только 
один раз.
Sample Input 1:
a aa abC aa ac abc bcd a
Sample Output 1:
ac 1
a 2
abc 2
bcd 1
aa 2
Sample Input 2:
a A a
Sample Output 2:
a 3
"""
# line = input().lower().split(" ")
# for _ in set(line):
#    print(_, " ", line.count(_))

# ***************************************************************************************************************
"""
Имеется реализованная функция f(x), принимающая на вход целое число x, которая вычисляет некоторое целочисленое 
значение и возвращает его в качестве результата работы. Функция вычисляется достаточно долго, ничего не выводит на 
экран, не пишет в файлы и зависит только от переданного аргумента x. Напишите программу, которой на вход в первой 
строке подаётся число n — количество значений x, для которых требуется узнать значение функции f(x), после чего сами 
эти n значений, каждое на отдельной строке. Программа должна после каждого введённого значения аргумента вывести 
соответствующие значения функции f на отдельной строке. Для ускорения вычисления необходимо сохранять уже вычисленные 
значения функции при известных аргументах. Обратите внимание, что в этой задаче установлено достаточно сильное 
ограничение в две секунды по времени исполнения 
кода на тесте.
Sample Input:
5
5
12
9
20
12
Sample Output:
11
41
47
61
41
"""
# def f(x):
#    r = {5: 11, 12: 41, 9: 47, 20: 61}
#    return r[x]
#
#
# k = int(input())
# d = {}
# for i in range(k):
#    key = int(input())
#    if key not in d:
#        d[key] = f(key)
#    print(d[key])

# ***************************************************************************************************************
"""
Напишите программу, которая считывает из файла строку, соответствующую тексту, сжатому с помощью кодирования повторов, 
и производит обратную операцию, получая исходный текст.
Sample Input:
a3b4c2e10b1
Sample Output:
aaabbbbcceeeeeeeeeeb
"""
dir = os.path.join('C:/', 'Users/', 'esergly/', 'Downloads/', 'dataset_3363_2.txt')
print(dir)
with open(dir) as source:
    line = source.readlines()
print(line)
