"""
Напишите программу, которая считывает с консоли числа (по одному в строке) до тех пор, пока сумма введённых чисел не
будет равна 0 и сразу после этого выводит сумму квадратов всех считанных чисел.Гарантируется, что в какой-то момент
сумма введённых чисел окажется равной 0, после этого считывание продолжать не нужно.
В примере мы считываем числа 1, -3, 5, -6, -10, 13; в этот момент замечаем, что сумма этих чисел равна нулю и выводим
сумму их квадратов, не обращая внимания на то, что остались ещё не прочитанные значения.﻿
Sample Input:
1
-3
5
-6
-10
13
4
-8
Sample Output:
340
"""
# summary, sq_summary = 0, 0
#
# while True:#
#    s = int(input())
#    summary += s
#    sq_summary += s * s
#    if summary == 0:
#        break
# print(sq_summary)
# ***************************************************************************************************************

"""
Напишите программу, которая выводит часть последовательности 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 ... 
(число повторяется столько раз, чему равно). На вход программе передаётся неотрицательное целое число n — столько 
элементов последовательности должна отобразить программа. На выходе ожидается последовательность чисел, записанных 
через пробел в одну строку.
Например, если n = 7, то программа должна вывести 1 2 2 3 3 3 4.
Sample Input:
7
Sample Output:
1 2 2 3 3 3 4
"""
# n = int(input())
# count = 0
# for i in range(1, n + 1):
#    for j in range(i):
#        if count < n:
#            count += 1
#            print(str(i), end=' ')
#        else:
#            break
# ***************************************************************************************************************
"""Напишите программу, которая считывает список чисел lst из первой строки и число x из второй строки, 
которая выводит все позиции, на которых встречается число x в переданном списке lst. Позиции нумеруются с нуля, 
если число x не встречается в списке, вывести строку "Отсутствует" (без кавычек, с большой буквы). Позиции должны 
быть выведены в одну строку, по возрастанию абсолютного значения. Sample Input 1: 5 8 2 7 8 8 2 4 8 Sample Output 1: 
1 4 5 Sample Input 2: 5 8 2 7 8 8 2 4 10 Sample Output 2: Отсутствует """
# lst = input().split(' ')
# x = input()
# if x in lst:
#   for i in range(len(lst)):
#       if lst[i] == x:
#           print(i, end=' ')
# else:
#   print('Отсутствует')
# ***************************************************************************************************************
"""
Напишите программу, на вход которой подаётся прямоугольная матрица в виде последовательности строк, заканчивающихся
строкой, содержащей только строку "end" (без кавычек)
Программа должна вывести матрицу того же размера, у которой каждый элемент в позиции i, j равен сумме элементов первой
матрицы на позициях (i-1, j), (i+1, j), (i, j-1), (i, j+1). У крайних символов соседний элемент находится с
противоположной стороны матрицы.
В случае одной строки/столбца элемент сам себе является соседом по соответствующему направлению.
Sample Input 1:
9 5 3
0 7 -1
-5 2 9
end
Sample Output 1:
3 21 22
10 6 19
20 16 -1
Sample Input 2:
1
end
Sample Output 2:
4
"""
# lst, res, count = [], [], 0
# while True:
#    s = input()
#    if s == "end":
#        x = len(lst)
#        y = len(lst[0])
#        for i in range(x):
#            for j in range(y):
#                a = int(lst[i - 1][j])
#                if (i + 1) == x:
#                    b = int(lst[0][j])
#                else:
#                    b = int(lst[i + 1][j])
#                c = int(lst[i][j - 1])
#                if (j + 1) == y:
#                    d = int(lst[i][0])
#                else:
#                    d = int(lst[i][j + 1])
#                z = (a + b + c + d)
#                res.append(z)
#        # блок вывода результатов в нужном формате
#        if len(lst) == len(lst[0]):
#            for n in range(len(res)):
#                if count == len(lst) - 1:
#                    count = 0
#                    print(res[n], end="\n")
#                else:
#                    count += 1
#                    print(res[n], end=' ')
#        else:
#            for n in range(len(res)):
#                if count == len(lst[0]) - 1:
#                    count = 0
#                    print(res[n], end="\n")
#                else:
#                    count += 1
#                    print(res[n], end=' ')
#        break
#    else:
#        t = s.split(' ')
#        lst.append(t)
# ***************************************************************************************************************
"""
Выведите таблицу размером n×n, заполненную числами от 1 до n2 по спирали, выходящей из левого верхнего угла и 
закрученной по часовой стрелке, как показано в примере (здесь n=5):
Sample Input:
5
Sample Output:
1 2 3 4 5
16 17 18 19 6
15 24 25 20 7
14 23 22 21 8
13 12 11 10 9
"""
# n - размерность матрицы n x n
# mat - результирующая матрица
# st - текущее значение-счетчик для записи в матрицу
# m - коеффициент, используемый для заполнения верхней
# матрицы последующих витков, т.к. одномерные матрицы
# следующих витков имеют меньше значений
# n = int(input("Введите размер таблицы:" + '\n'))
# mat = [[0] * n for i in range(n)]
# st, m = 1, 0
# Заранее присваиваю значение центральному элементу матрицы
# mat[n // 2][n // 2] = n * n
# for v in range(n // 2):
#    # Заполнение верхней горизонтальной матрицы
#    for i in range(n - m):
#        mat[v][i + v] = st
#        st += 1
#    # Заполнение правой вертикальной матрицы
#    for i in range(v + 1, n - v):
#        mat[i][-v - 1] = st
#        st += 1
#    # Заполнение нижней горизонтальной матрицы
#    for i in range(v + 1, n - v):
#        mat[-v - 1][-i - 1] = st
#        st += 1
#    # Заполнение левой вертикальной матрицы
#    for i in range(v + 1, n - (v + 1)):
#        mat[-i - 1][v] = st
#        st += 1
#    m += 2
# Вывод результата на экран
# for i in mat:
#    print(*i)
# ***************************************************************************************************************
"""
Напишите функцию update_dictionary(d, key, value), которая принимает на вход словарь d и два числа: key и value.
Если ключ key есть в словаре d, то добавьте значение value в список, который хранится по этому ключу.
Если ключа key нет в словаре, то нужно добавить значение в список по ключу 2*key. Если и ключа 2*key нет, то нужно 
добавить ключ 2*key в словарь и сопоставить ему список из переданного элемента [value].
Требуется реализовать только эту функцию, кода вне неё не должно быть.
Функция не должна вызывать внутри себя функции input и print.
Пример работы функции:
d = {}
print(update_dictionary(d, 1, -1))  # None
print(d)                            # {2: [-1]}
update_dictionary(d, 2, -2)
print(d)                            # {2: [-1, -2]}
update_dictionary(d, 1, -3)
print(d)                            # {2: [-1, -2, -3]}
"""
# def update_dictionary(d, key, value):
#    if key in d.keys():
#        d[key] += [value]
#    else:
#        if key * 2 in d.keys():
#            d[key * 2] += [value]
#        else:
#            d[key * 2] = [value]
#
#
# d = {}
# print(update_dictionary(d, 1, -1))  # None
# print(d)  # {2: [-1]}
# update_dictionary(d, 2, -2)
# print(d)  # {2: [-1, -2]}
# update_dictionary(d, 1, -3)
# print(d)  # {2: [-1, -2, -3]}

# ***************************************************************************************************************
"""
Когда Антон прочитал «Войну и мир», ему стало интересно, сколько слов и в каком количестве используется в этой книге.
Помогите Антону написать упрощённую версию такой программы, которая сможет подсчитать слова, разделённые пробелом и 
вывести получившуюся статистику. Программа должна считывать одну строку со стандартного ввода и выводить для каждого 
уникального слова в этой строке число его повторений (без учёта регистра) в формате "слово количество" 
(см. пример вывода). Порядок вывода слов может быть произвольным, каждое уникальное слово﻿ должно выводиться только 
один раз.
Sample Input 1:
a aa abC aa ac abc bcd a
Sample Output 1:
ac 1
a 2
abc 2
bcd 1
aa 2
Sample Input 2:
a A a
Sample Output 2:
a 3
"""
# line = input().lower().split(" ")
# for _ in set(line):
#    print(_, " ", line.count(_))

# ***************************************************************************************************************
"""
Имеется реализованная функция f(x), принимающая на вход целое число x, которая вычисляет некоторое целочисленое 
значение и возвращает его в качестве результата работы. Функция вычисляется достаточно долго, ничего не выводит на 
экран, не пишет в файлы и зависит только от переданного аргумента x. Напишите программу, которой на вход в первой 
строке подаётся число n — количество значений x, для которых требуется узнать значение функции f(x), после чего сами 
эти n значений, каждое на отдельной строке. Программа должна после каждого введённого значения аргумента вывести 
соответствующие значения функции f на отдельной строке. Для ускорения вычисления необходимо сохранять уже вычисленные 
значения функции при известных аргументах. Обратите внимание, что в этой задаче установлено достаточно сильное 
ограничение в две секунды по времени исполнения 
кода на тесте.
Sample Input:
5
5
12
9
20
12
Sample Output:
11
41
47
61
41
"""
# def f(x):
#    r = {5: 11, 12: 41, 9: 47, 20: 61}
#    return r[x]
#
#
# k = int(input())
# d = {}
# for i in range(k):
#    key = int(input())
#    if key not in d:
#        d[key] = f(key)
#    print(d[key])

# ***************************************************************************************************************
"""
Напишите программу, которая считывает из файла строку, соответствующую тексту, сжатому с помощью кодирования повторов, 
и производит обратную операцию, получая исходный текст.
Sample Input:
a3b4c2e10b1
Sample Output:
aaabbbbcceeeeeeeeeeb
"""
# input_file = os.path.join('C:/', 'Users/', '***/', 'Downloads/', 'dataset_3363_2.txt')
# output_file = os.path.join('C:/', 'Users/', '***/', 'Downloads/', '23.txt')
# res = ''
# with open(input_file) as source:
#     lines = ''
#     for line in source:
#         lines += (line.strip())
"""
Первый символ - гарантированно буква.
Перебираем все последующие, пока они цифровые или пока не достигнут конец строки.
После внутреннего цикла j либо указывает на следующую букву, либо на конец строки.
В обоих случаях между s[i] и s[j] цифры, составляющие нужное нам число повторов символа s[i].
Печатаем символ нужное число раз, присваиваем i индекс следующей буквы для новой итерации цикла.
"""
# i = 0
# while i < len(lines):
#    j = i + 1
#    while j < len(lines) and lines[j].isdigit():
#        j += 1
#    res += (lines[i] * int(lines[i + 1:j]))
#    i = j
# with open(output_file, 'w') as output:
#    output.writelines(res)
# ***************************************************************************************************************
"""
Напишите программу, которая считывает текст из файла (в файле может быть больше одной строки) и выводит самое частое 
слово в этом тексте и через пробел то, сколько раз оно встретилось. Если таких слов несколько, вывести 
лексикографически первое (можно использовать оператор < для строк).
Слова, написанные в разных регистрах, считаются одинаковыми.
Sample Input:
abc a bCd bC AbC BC BCD bcd ABC
Sample Output:
abc 3
"""
# input_file = os.path.join('C:/', 'Users/', '***/', 'Downloads/', 'dataset_3363_3.txt')
# with open(input_file) as source:
#     text = source.read().lower().split()
# popular_word = max(set(text), key=text.count)
# print(popular_word, text.count(popular_word))

# ***************************************************************************************************************
"""
Имеется файл с данными по успеваемости абитуриентов. Он представляет из себя набор строк, где в каждой строке записана 
следующая информация:
Фамилия;Оценка_по_математике;Оценка_по_физике;Оценка_по_русскому_языку
Поля внутри строки разделены точкой с запятой, оценки — целые числа.
Напишите программу, которая считывает файл с подобной структурой и для каждого абитуриента выводит его среднюю оценку 
по этим трём предметам на отдельной строке, соответствующей этому абитуриенту.
Также в конце файла, на отдельной строке, через пробел запишите средние баллы по математике, физике и русскому языку 
по всем абитуриентам.
В качестве ответа на задание прикрепите полученный файл со средними оценками.
Sample Input:
Петров;85;92;78
Сидоров;100;88;94
Иванов;58;72;85
Sample Output:
85.0
94.0
71.666666667
81.0 84.0 85.666666667
"""
# input_file = os.path.join('dataset_3363_4.txt')
# output_file = os.path.join('out.txt')
# text, summath, sumphy, sumrus = [], 0, 0, 0
#
# with open(input_file, encoding='utf-8') as source, open(output_file, 'w') as out:
#    for _ in source:
#        text.append(_)
#    for i in range(len(text)):
#        if text[i][-1] == '\n':
#            text[i] = text[i][:-1].split(';')
#    sumMiddle = 0
#    for el in text:
#        sumMiddle = (float(el[1]) + float(el[2]) + float(el[3])) / 3
#        out.write(str(sumMiddle) + '\n')
#    for el in text:
#        summath += float(el[1])
#        sumphy += float(el[2])
#        sumrus += float(el[3])
#    summath /= len(text)
#    sumphy /= len(text)
#    sumrus /= len(text)
#    out.write(str(summath) + ' ' + str(sumphy) + ' ' + str(sumrus))
# ***************************************************************************************************************
"""
Напишите программу, которая подключает модуль math и, используя значение числа π из этого модуля, находит для 
переданного ей на стандартный ввод радиуса круга периметр этого круга и выводит его на стандартный вывод.
Sample Input:
10.0
Sample Output:
62.83185307179586
"""
# from math import pi
#
# print(2 * pi * float(input()))
# ***************************************************************************************************************
"""
Напишите программу, которая запускается из консоли и печатает значения всех переданных аргументов на экран 
(имя скрипта выводить не нужно). Не изменяйте порядок аргументов при выводе.
Для доступа к аргументам командной строки программы подключите модуль sys и используйте переменную argv из этого модуля.
Пример работы программы:
> python3 my_solution.py arg1 arg2
arg1 arg2
"""
# print(*sys.argv[1:])
# ***************************************************************************************************************
"""
Скачайте файл. В нём указан адрес другого файла, который нужно скачать с использованием модуля requests и посчитать 
число строк в нём.
Используйте функцию get для получения файла (имеет смысл вызвать метод strip к передаваемому параметру, чтобы убрать 
пробельные символы по краям).
После получения файла вы можете проверить результат, обратившись к полю text. Если результат работы скрипта 
не принимается, проверьте поле url на правильность. Для подсчёта количества строк разбейте текст с помощью 
метода splitlines.
В поле ответа введите одно число или отправьте файл, содержащий одно число.
"""
# with open('dataset_3378_2.txt') as inf:
#    r = requests.get(inf.readline().strip())
#    print(len(r.text.splitlines()))
# ***************************************************************************************************************
"""
Имеется набор файлов, каждый из которых, кроме последнего, содержит имя следующего файла.
Первое слово в тексте последнего файла: "We".
Скачайте предложенный файл. В нём содержится ссылка на первый файл из этого набора.
Все файлы располагаются в каталоге по адресу:
https://stepic.org/media/attachments/course67/3.6.3/
Загрузите содержимое ﻿последнего файла из набора, как ответ на это задание.
"""
# url = "https://stepic.org/media/attachments/course67/3.6.3/"
# r = requests.get(url + "699991.txt")
# while not r.text.startswith("We"):
#    r = requests.get(url + r.text)
# Вывод результата будет с задержкой около минуты
# print(r.text)
# ***************************************************************************************************************
"""
Напишите программу, которая принимает на стандартный вход список игр футбольных команд с результатом матча и выводит
на стандартный вывод сводную таблицу результатов всех матчей.
За победу команде начисляется 3 очка, за поражение — 0, за ничью — 1.
Формат ввода следующий:
В первой строке указано целое число n — количество завершенных игр.
После этого идет n строк, в которых записаны результаты игры в следующем формате:
Первая_команда;Забито_первой_командой;Вторая_команда;Забито_второй_командой
Вывод программы необходимо оформить следующим образом:
Команда:Всего_игр Побед Ничьих Поражений Всего_очков
Конкретный пример ввода-вывода приведён ниже.
Порядок вывода команд произвольный.
Sample Input:
3
Зенит;3;Спартак;1
Спартак;1;ЦСКА;1
ЦСКА;0;Зенит;2
Sample Output:
Зенит:2 2 0 0 6
ЦСКА:2 0 1 1 1
Спартак:2 0 1 1 1
"""
# class Team:
#    def __init__(self, name):
#        self.name = name
#        self.wins = 0
#        self.draws = 0
#        self.loses = 0
#        self.scores = 0
#
#    def add_win(self):
#        self.wins += 1
#        self.scores += 3
#
#    def add_lose(self):
#        self.loses += 1
#
#    def add_draw(self):
#        self.draws += 1
#        self.scores += 1
#
#
# table = {}
# for i in range(int(input())):
#    c1, sc1, c2, sc2 = input().split(';')
#    for command in (c1, c2):
#        if command not in table:
#            table.update({command: Team(command)})
#    if sc1 > sc2:
#        table[c1].add_win()
#        table[c2].add_lose()
#    elif sc2 > sc1:
#        table[c2].add_win()
#        table[c1].add_lose()
#    else:
#        table[c1].add_draw()
#        table[c2].add_draw()
#
# for c in table.values():
#    print(f'{c.name}:', c.wins + c.draws + c.loses, c.wins, c.draws, c.loses, c.scores)
"""
В какой-то момент в Институте биоинформатики биологи перестали понимать, что говорят информатики: они говорили каким-то 
странным набором звуков. В какой-то момент один из биологов раскрыл секрет информатиков: они использовали при общении 
подстановочный шифр, т.е. заменяли каждый символ исходного сообщения на соответствующий ему другой символ. Биологи 
раздобыли ключ к шифру и теперь нуждаются в помощи:
Напишите программу, которая умеет шифровать и расшифровывать шифр подстановки. Программа принимает на вход две строки 
одинаковой длины, на первой строке записаны символы исходного алфавита, на второй строке — символы конечного алфавита, 
после чего идёт строка, которую нужно зашифровать переданным ключом, и ещё одна строка, которую нужно расшифровать.

Пусть, например, на вход программе передано:
abcd
*d%#
abacabadaba
#*%*d*%

Это значит, что символ a исходного сообщения заменяется на символ * в шифре, b заменяется на d, c — на % и d — на #.
Нужно зашифровать строку abacabadaba и расшифровать строку #*%*d*% с помощью этого шифра. Получаем следующие строки, 
которые и передаём на вывод программы:
*d*%*d*#*d*
dacabac
﻿
Sample Input 1:
abcd
*d%#
abacabadaba
#*%*d*%
Sample Output 1:
*d*%*d*#*d*
dacabac
Sample Input 2:
dcba
badc
dcba
badc
Sample Output 2:
badc
dcba
"""
# phrase, keyword, res1, res2 = [], [], [], []
# p, k = input(), input()
# phrase.append(list(p))
# keyword.append(list(k))
# combo1 = dict(zip(phrase[0], keyword[0]))
# combo2 = dict(zip(keyword[0], phrase[0]))
# a, b = list(input()), list(input())
# for i in range(len(a)):
#    res1.append(combo1[a[i]])
#    print(res1[i], end="")
# print()
# for i in range(len(b)):
#    res2.append(combo2[b[i]])
#    print(res2[i], end="")
"""
Простейшая система проверки орфографии основана на использовании списка известных слов. Каждое слово в проверяемом 
тексте ищется в этом списке и, если такое слово не найдено, оно помечается, как ошибочное.
Напишем подобную систему.
Через стандартный ввод подаётся следующая структура: первой строкой — количество dd записей в списке известных слов, 
после передаётся  dd строк с одним словарным словом на строку, затем — количество ll строк текста, после чего — ll 
строк текста.
Напишите программу, которая выводит слова из текста, которые не встречаются в словаре. Регистр слов не учитывается. 
Порядок вывода слов произвольный. Слова, не встречающиеся в словаре, не должны повторяться в выводе программы.
﻿Sample Input:
3
a
bb
cCc
2
a bb aab aba ccc
c bb aaa
Sample Output:
aab
aba
c
aaa
"""
# count_lines_in_dict = int(input())
# t, lines_in_dict, lines_in_text = [], [], []
# for i in range(count_lines_in_dict):
#    lines_in_dict.append(input().lower())
# count_lines_in_text = int(input())
# for j in range(count_lines_in_text):
#    t.append(input().split(" "))
# for k in range(count_lines_in_text):
#    for n in range(len(t[k])):
#        lines_in_text.append(t[k][n])
# t.clear()
# for each in lines_in_text:
#    if each.lower() not in lines_in_dict:
#        t.append(each)
# for e in set(t):
#    print(e)
"""
Группа биологов в институте биоинформатики завела себе черепашку.
После дрессировки черепашка научилась понимать и запоминать указания биологов следующего вида:
север 10
запад 20
юг 30
восток 40
где первое слово — это направление, в котором должна двигаться черепашка, а число после слова — это положительное 
расстояние в сантиметрах, которое должна пройти черепашка.
Но команды даются быстро, а черепашка ползёт медленно, и программисты догадались, что можно написать программу, 
которая определит, куда в итоге биологи приведут черепашку. Для этого программисты просят вас написать программу, 
которая выведет точку, в которой окажется черепашка после всех команд. Для простоты они решили считать, что движение 
начинается в точке (0, 0), и движение на восток увеличивает первую координату, а на север — вторую.
Программе подаётся на вход число команд nn, которые нужно выполнить черепашке, после чего nn строк с самими командами. 
Вывести нужно два числа в одну строку: первую и вторую координату конечной точки черепашки. Все координаты 
целочисленные.
Sample Input:
4
север 10
запад 20
юг 30
восток 40
Sample Output:
20 -20
"""
# steps = int(input())
# route, res_x, res_y = [], 0, 0
# for i in range(steps):
#    route.append(input().split(" "))
# for each in route:
#    if each[0] == 'север':
#        res_y += int(each[1])
#    if each[0] == 'запад':
#        res_x -= int(each[1])
#    if each[0] == 'юг':
#        res_y -= int(each[1])
#    if each[0] == 'восток':
#        res_x += int(each[1])
# print(str(res_x) + " " + str(res_y))
"""
Дан файл с таблицей в формате TSV с информацией о росте школьников разных классов.
Напишите программу, которая прочитает этот файл и подсчитает для каждого класса средний рост учащегося.
Файл состоит из набора строк, каждая из которых представляет собой три поля:
Класс Фамилия Рост
Класс обозначается только числом. Буквенные модификаторы не используются. 
Номер класса может быть от 1 до 11 включительно. В фамилии нет пробелов, а в качестве роста используется 
натуральное число, но при подсчёте среднего требуется вычислить значение в виде вещественного числа.
Выводить информацию о среднем росте следует в порядке возрастания номера класса (для классов с первого по одиннадцатый). 
Если про какой-то класс нет информации, необходимо вывести напротив него прочерк, например:
Sample Input:
6	Вяххи	159
11	Федотов	172
7	Бондарев	158
6	Чайкина	153
Sample Output:
1 -
2 -
3 -
4 -
5 -
6 156.0
7 158.0
8 -
9 -
10 -
11 172.0
"""
# data, res, rost, counter = [], [], {}, {}
# input_file = os.path.join('C:/', 'Users/', '***/', 'Downloads/', 'dataset_3380_5.txt')
# with open(input_file) as source:
#    data.append(source.read().split("\n"))
# for each in data[0]:
#    res.append(each.split('\t'))
# res.remove(res[-1])
# for each in res:
#    if each[0] not in rost:
#        rost.update({each[0]: each[2]})
#        counter.update({each[0]: 1})
#    else:
#        counter[each[0]] += 1
#        x = int(rost[each[0]])
#        rost.update({each[0]: x + int(each[2])})
# data = []
# for key in rost:
#    rost[key] = (int(rost[key]) / counter[key])
#    data.append(int(key))
# for i in range(1, max(data) + 1):
#    if i not in data:
#        print(str(i) + " -")
#    else:
#        print(f"{i} {rost[str(i)]}")
